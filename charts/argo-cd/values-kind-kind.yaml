argo-cd:
  installCRDs: false
  global:
    image:
      tag: v2.2.3
  ## Controller
  controller:
    name: application-controller

    image:
      repository: # defaults to global.image.repository
      tag: # defaults to global.image.tag
      imagePullPolicy: # IfNotPresent

    # If changing the number of replicas you must pass the number as ARGOCD_CONTROLLER_REPLICAS as an environment variable
    replicas: 3

    # Deploy the application as a StatefulSet instead of a Deployment, this is required for HA capability.
    # This is a feature flag that will become the default in chart version 3.x
    enableStatefulSet: true

    ## Argo controller commandline flags
    args:
      statusProcessors: "20"
      operationProcessors: "10"
      appResyncPeriod: "180"
      selfHealTimeout: "5"

    ## Argo controller log format: text|json
    logFormat: text
    ## Argo controller log level
    logLevel: info

    ## Additional command line arguments to pass to argocd-controller
    ##
    extraArgs: []

    ## Environment variables to pass to argocd-controller
    ##
    env:
      # []
      - name: "ARGOCD_CONTROLLER_REPLICAS"
        value: "3"

    ## envFrom to pass to argocd-controller
    ##
    envFrom: []
    # - configMapRef:
    #     name: config-map-name
    # - secretRef:
    #     name: secret-name

    ## Annotations to be added to controller pods
    ##
    podAnnotations: {}

    ## Labels to be added to controller pods
    ##
    podLabels: {}

    ## Labels to set container specific security contexts
    containerSecurityContext:
      {}
      # capabilities:
      #   drop:
      #     - all
      # readOnlyRootFilesystem: true

    ## Configures the controller port
    containerPort: 8082

    ## Readiness and liveness probes for default backend
    ## Ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/
    ##
    readinessProbe:
      failureThreshold: 3
      initialDelaySeconds: 10
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 1
    livenessProbe:
      failureThreshold: 3
      initialDelaySeconds: 10
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 1

    ## Additional volumeMounts to the controller main container.
    volumeMounts: []

    ## Additional volumes to the controller pod.
    volumes: []

    ## Controller service configuration
    service:
      annotations: {}
      labels: {}
      port: 8082
      portName: https-controller

    ## Node selectors and tolerations for server scheduling to nodes with taints
    ## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
    ##
    nodeSelector: {}
    tolerations: []
    affinity: {}

    priorityClassName: ""

    # application-controller
    resources:
      limits:
        cpu: 4000m
        memory: 2048Mi
      requests:
        cpu: 2000m
        memory: 1024Mi

    serviceAccount:
      create: true
      name: argocd-application-controller
      ## Annotations applied to created service account
      annotations: {}
      ## Automount API credentials for the Service Account
      automountServiceAccountToken: true

    ## Server metrics controller configuration
    metrics:
      enabled: true
      service:
        annotations: {}
        labels: {}
        servicePort: 8082
      serviceMonitor:
        enabled: true
        interval: 30s
        selector:
          prometheus: kube-prometheus
        namespace: prometheus
        additionalLabels: {}
      rules:
        enabled: true
        spec:
          - alert: ArgoAppMissing
            expr: |
              absent(argocd_app_info)
            for: 15m
            labels:
              severity: critical
            annotations:
              summary: "[ArgoCD] No reported applications"
              description: >
                ArgoCD has not reported any applications data for the past 15 minutes which
                means that it must be down or not functioning properly.  This needs to be
                resolved for this cloud to continue to maintain state.
          - alert: ArgoAppNotSynced
            expr: |
              argocd_app_info{sync_status!="Synced"} == 1
            for: 12h
            labels:
              severity: warning
            annotations:
              summary: "[{{`{{$labels.name}}`}}] Application not synchronized"
              description: >
                The application [{{`{{$labels.name}}`}} has not been synchronized for over
                12 hours which means that the state of this cloud has drifted away from the
                state inside Git.
        selector:
          prometheus: kube-prometheus
        namespace: prometheus
        additionalLabels: {}

    ## Enable Admin ClusterRole resources.
    ## Enable if you would like to grant rights to ArgoCD to deploy to the local Kubernetes cluster.
    clusterAdminAccess:
      enabled: true
    ## Enable Custom Rules for the Application Controller's Cluster Role resource
    ## Enable this and set the rules: to whatever custom rules you want for the Cluster Role resource.
    ## Defaults to off
    clusterRoleRules:
      enabled: false
      rules: []
  dex:
    enabled: false
  server:
    extraArgs:
      - --insecure
    config:
      repositories: |
        - type: helm
          name: stable
          url: https://charts.helm.sh/stable
        - type: helm
          name: argo-cd
          url: https://argoproj.github.io/argo-helm
  configs:
      ## External Cluster Credentials
      ## reference:
      ## - https://argoproj.github.io/argo-cd/operator-manual/declarative-setup/#clusters
      ## - https://argoproj.github.io/argo-cd/operator-manual/security/#external-cluster-credentials
      clusterCredentials:
        []
        # - name: mycluster
        #   server: https://mycluster.com
        #   labels: {}
        #   annotations: {}
        #   config:
        #     bearerToken: "<authentication token>"
        #     tlsClientConfig:
        #       insecure: false
        #       caData: "<base64 encoded certificate>"
        # - name: mycluster2
        #   server: https://mycluster2.com
        #   labels: {}
        #   annotations: {}
        #   namespaces: namespace1,namespace2
        #   config:
        #     bearerToken: "<authentication token>"
        #     tlsClientConfig:
        #       insecure: false
        #       caData: "<base64 encoded certificate>"

      knownHostsAnnotations: {}
      knownHosts:
        data:
          ssh_known_hosts: |
            github.com ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDh7+O+q1XL2EtP1NnaymFPz841D2aRAy3gnZybcw/Zsk4ADBtrEUOv/8mQa5uBZVRJJsllVR9L/u/bukpUJUhNVciVAU1Fknb3cbEoeVW/H1XOyPt7BlyczmM6RFqHf1c0ShOm9phYSbfWIQ3nye/ye8xq3GdNkrEqTW4+mL8rHkAe8r3UUbZdhnKNC/3aHkzskKOkySxj3rkYtC9U+4luv848waXDxvbvdZcBuXpOZCfYQoLvHZfpFqyaqqs9ps1xujim23ZLmzO9D5tO2/mvcgPJ4snx6BrvhQeVyqslCWK5XoKo0+YfdO7Ctw3LK2/BZk29NnFieqHxzV+YIxADK7XewkfMk2tTtNEMC5j3mfRIaUBjHNAgu96FyI4qEv19Fl3Vm+6mZNa+DjBUisM9m2Kl8yxOD00309o4e+25MiyBboo3rYx6er9UczzEeQVflG1D49UEeg/a65M5uV8VmOm3dB9b5DUkwrHcYo0m9I5+TIQ0W3/TJpnbuzY3Wvk= argo
      tlsCertsAnnotations: {}
      tlsCerts: {}
      # Creates a secret with optional repository credentials
      repositoryCredentials: {}
      secret:
        createSecret: true
        ## Annotations to be added to argocd-secret
        ##
        annotations: {}

        # Webhook Configs
        githubSecret: ""
        gitlabSecret: ""
        bitbucketServerSecret: ""
        bitbucketUUID: ""
        gogsSecret: ""

        # Custom secrets. Useful for injecting SSO secrets into environment variables.
        # Ref: https://argoproj.github.io/argo-cd/operator-manual/sso/
        # Note that all values must be non-empty.
        extra:
          {}
          # LDAP_PASSWORD: "mypassword"

        # Argo TLS Data.
        argocdServerTlsConfig:
          {}
          # key:
          # crt: |
          #   -----BEGIN CERTIFICATE-----
          #   <cert data>
          #   -----END CERTIFICATE-----
          #   -----BEGIN CERTIFICATE-----
          #   <ca cert data>
          #   -----END CERTIFICATE-----

        # Argo expects the password in the secret to be bcrypt hashed. You can create this hash with
        # `htpasswd -nbBC 10 "" $ARGO_PWD | tr -d ':\n' | sed 's/$2y/$2a/'`
        # argocdServerAdminPassword: ""
        # Password modification time defaults to current time if not set
        # argocdServerAdminPasswordMtime: "2006-01-02T15:04:05Z"

      ## Custom CSS Styles
      ## Reference: https://argo-cd.readthedocs.io/en/stable/operator-manual/custom-styles/
      # styles: |
      #  .nav-bar {
      #    background: linear-gradient(to bottom, #999, #777, #333, #222, #111);
      #  }

